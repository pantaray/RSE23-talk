---
title: "ACME"
subtitle: "Flexible Scalability for Research Software"
author:
  - Stefan FÃ¼rtinger, ESI Frankfurt
  - Dr. Allison Horst, UC Santa Barbara
  - Dr. Alison Hill, Voltron Data
date: 23.02.2023
institute:
  - ESI
  - Bremen
format:
  revealjs:
    theme: [white, css/esi.scss]
    slide-number: false
    menu: true
    progress: true
    chalkboard:
      buttons: false
    preview-links: auto
    css: css/agenda.css
    code-line-numbers: false
    highlight-style: github
    auto-play-media: true
include-after-body: css/esi_borders.html
revealjs-plugins:
  - attribution
filters:
  - reveal-auto-agenda
auto-agenda:
  bullets: none
  heading: Outline
# resources:
#   - demo.pdf
---

# I Big Data Is Great

## Big Data {transition="fade-out"}

::: {.r-stack}
![](imgs/sas_bigdata.png){.fragment .fade-left .absolute top="2em" right="0em" width="55%"}
![](imgs/bmbf_bigdata.png){.fragment .fade-right .absolute top="4em" left="0em" width="55%"}
:::

::: {.attribution}
See [sas.com](https://www.sas.com/en_us/insights/big-data/what-is-big-data.html) and [bmbf.de](https://www.bmbf.de/bmbf/de/forschung/digitale-wirtschaft-und-gesellschaft/informationsgesellschaft/big-data/big-data-management-und-analyse-grosser-datenmengen.html)
:::

## Big Data | Open Data {transition="fade"}

::: {.r-stack}
![](imgs/sas_bigdata.png){.absolute top="2em" right="0em" width="55%"}
![](imgs/bmbf_bigdata.png){.absolute top="4em" left="0em" width="55%"}
![](imgs/opendata.jpg){.fragment .fade-right .absolute top="2em" left="1em" width="50%"}
![](imgs/open_science.jpg){.fragment .fade-left .absolute bottom="2em" right="-1em" width="50%"}
:::

::: {.attribution}
Taken from [itsfoss.com](https://itsfoss.com/open-science/) and [JulieBeck](http://www.juliebcreative.com/portfolio/open-data-logo/)
:::

## Big Data | Open Data | FAIR Data {transition="fade-in"}

::: {.r-stack}
![](imgs/sas_bigdata.png){.absolute top="2em" right="0em" width="55%"}
![](imgs/bmbf_bigdata.png){.absolute top="4em" left="0em" width="55%"}
![](imgs/opendata.jpg){.absolute top="2em" left="1em" width="50%"}
![](imgs/open_science.jpg){.absolute bottom="2em" right="-1em" width="50%"}
![](imgs/punch4nfdi.png){.fragment .fade-down .absolute top="2em" left="0em" width="90%"}
![](imgs/nfdi4health.png){.fragment .fade-up .absolute bottom="1em" right="0em" width="90%"}
:::

::: {.attribution}
See [nfdi.de](https://www.nfdi.de/?lang=en)
:::

## A Topical Example

::: {.r-stack}
![](imgs/fastMRI_website.png){.fragment .fade-in-then-semi-out .absolute width="85%" top="1.5em" left="1em"}
![](imgs/fastMRI_knee.png){.fragment .absolute width="40%" left="1em" top="4em"}
![](imgs/fastMRI_brain.png){.fragment .absolute width="45%" right="1em" top="1.5em"}
:::

::: {.attribution}
See [fastmri.med.nyu.edu](https://fastmri.med.nyu.edu/)
:::

## Scale Up or Out? {auto-animate=true}

:::: {.columns}

::: {.column width="50%" .fragment .fade-right}
[Scale Up]{.esi-emph}

We Need a Bigger Boat
<!-- ![](imgs/bigger_boat.jpg){style="opacity: 0.2"} -->
![](imgs/bigger_boat.jpg){.fragment .semi-fade-out}

::: {.incremental .absolute top="4.5em"}
- [How much bigger?]{style="-webkit-text-stroke: 0.5px;"}
- [How many passengers?]{style="-webkit-text-stroke: 0.5px;"}
:::

:::

::: {.column width="50%" .fragment .fade-left}
[Scale Out]{.esi-emph}

We Need a... Quad?
![](imgs/quadmaran.jpg){.fragment .semi-fade-out}
:::

::: {.incremental .absolute top="6.7em" left="13.5em" right="1em"}
- [How do we get lifeboats on there?]{style="-webkit-text-stroke: 0.5px;"}
- [How do we drive this?]{style="-webkit-text-stroke: 0.5px;"}
:::

::::

::: {.attribution}
Taken from *Jaws*, Universal Pictures, 1975 and [The Nautical Lore Capercast](http://outrigmedia.com/outrig/multihulls-media/nautical-lore-capercast-78-the-100-four-huller/)
:::

. . .

::: {data-id="box1" style="background: rgba(0,0,0,0); width: 14em; height: 15em; border-radius: 50%; border: 0.2em solid red; " .absolute top="1em" right="0em" .fade}
:::

## We Bought a Quadmaran!

Scheduler logos coming soon...

# II Why ACME?

## Driving a Quadmaran {transition="fade-out"}

### Or Going from Laptop to SLURM

## Driving a Quadmaran {transition="fade-in" auto-animate=true}

```{.python code-line-numbers="|5-6,9-11,14-15" data-id="code1"}
# Which subject do we want to analyze?
subIdx = 0

# Take stock of data on disk
data = datasets.fetch_development_fmri(age_group="adult")
atlasCoords = datasets.fetch_coords_power_2011()

# Extract fMRI time-series averaged within spheres @ atlas coords
mask = NiftiSpheresMasker(seeds=atlasCoords)
timeseries = mask.fit_transform(data.func[subIdx],
                                confounds=data.confounds[subIdx])

# Compute functional connectivity b/w brain regions
estimator = GraphicalLassoCV()
estimator.fit(timeseries)

# Inspect results
plotting.plot_connectome(estimator.covariance_)
```

::: {.r-stack}
![](imgs/subject0.png){.fragment fragment-index=1 .fade-in-then-out .absolute top="3em" left="5em" width="55%"}
:::

## Driving a Quadmaran {auto-animate=true}

```{.python data-id="code1" code-line-numbers="1-16|" style="font-size: 0.8em; "}
def compute_connectome(subIdx):

      # Take stock of data on disk
      data = datasets.fetch_development_fmri(age_group="adult")
      atlasCoords = datasets.fetch_coords_power_2011()

      # Extract fMRI time-series averaged within spheres @ atlas coords
      masker = NiftiSpheresMasker(seeds=atlasCoords)
      timeseries = masker.fit_transform(data.func[subIdx],
                                        confounds=data.confounds[subIdx])

      # Compute functional connectivity b/w brain regions
      estimator = GraphicalLassoCV()
      estimator.fit(timeseries)
      return estimator.covariance_

if __name__ == "__main__":

      # Compute functional connectivity of subject and save result
      con = compute_connectome(sys.argv[1])
      np.save("con_{}".format(sys.argv[1]), con)
```

## Driving a Quadmaran {auto-animate="true"}

```{.python data-id="code2" filename="connectome.py" style="font-size: 0.8em; "}
def compute_connectome(subIdx):

      # Take stock of data on disk
      data = datasets.fetch_development_fmri(age_group="adult")
      atlasCoords = datasets.fetch_coords_power_2011()

      # Extract fMRI time-series averaged within spheres @ atlas coords
      masker = NiftiSpheresMasker(seeds=atlasCoords)
      timeseries = masker.fit_transform(data.func[subIdx],
                                        confounds=data.confounds[subIdx])

      # Compute functional connectivity b/w brain regions
      estimator = GraphicalLassoCV()
      estimator.fit(timeseries)
      return estimator.covariance_

if __name__ == "__main__":

      # Compute functional connectivity of subject
      con = compute_connectome(sys.argv[1])
      np.save("con_{}".format(sys.argv[1]), con)
```

## Driving a Quadmaran {auto-animate=true}

```{.python data-id="code2" filename="connectome.py"}
```

. . .

```{.bash data-id="code3" filename="run_connectome.sh"}
#!/bin/bash
#
# SLURM script for computing per-subject connectomes
#
#SBATCH -J connectome_batch # Common name for the job-array
#SBATCH -p myPartition      # Partition
#SBATCH -c 2                # Use two cores
#SBATCH -t 0-2:00           # Max run-time of 2 hours
#SBATCH --mem 4000          # Request 4 GB of RAM
#SBATCH -o con_%A_%a.out    # Redirect stdout/stderr to file
#SBATCH --array=1-33        # Define job-array

source /path/to/conda/etc/profile.d/conda.sh
conda activate myenv
python connectome.py "$SLURM_ARRAY_TASK_ID"
```

## Driving a Quadmaran {auto-animate=true}

```{.python data-id="code2" filename="connectome.py"}
```

```{.bash data-id="code3" filename="run_connectome.sh"}
```

. . .

```{data-id="code4"}
sbatch run_connectome.sh
```

## Driving a Quadmaran {auto-animate=true}

```{.python data-id="code2" filename="connectome.py"}
```

```{.bash data-id="code3" filename="run_connectome.sh"}
```

```{data-id="code4"}
sbatch run_connectome.sh
Submitted batch job 21607933

squeue --me
ACCOUNT JOBID PARTITION NODELIST PRIORITY TIME STATE
fuertingers 21607933_3 8GBXS esi-svhpc46 25228545 0:11 RUNNING
fuertingers 21607933_4 8GBXS esi-svhpc46 25228545 0:11 RUNNING
fuertingers 21607933_5 8GBXS esi-svhpc29 25228545 0:11 RUNNING
fuertingers 21607933_2 8GBXS esi-svhpc24 25228545 0:15 RUNNING
fuertingers 21607933_1 8GBXS esi-svhpc24 25228545 0:16 RUNNING
...
```

## Driving a Quadmaran {transition="fade"}

<!-- ```{=html}
<iframe src="imgs/sbatch.html" width="100%" height="80%"></iframe>
``` -->

![](imgs/sbatch_schedmd.gif)

## It All Started With A gist...

![](imgs/acme_gist.png){.position .absolute height="80%" left="2em"}

## Asynchronous Computing Made ESI

![](imgs/acme_logo.png){.position .absolute left="0em" top="3em" width="22%"}

::: {.incremental style="font-size: 0.9em; " .position .absolute left="8em" right="0em" top="3.5em"}
- accelerates "simple", i.e., [embarassingly parallel]{.esi-emph}, workloads
- [wraps]{.esi-emph} sequential code and [maps]{.esi-emph} on parallel computing hardware
- DIY parallelization via [context manager]{.esi-emph} `ParallelMap` in Python
- built on top of [[dask](https://www.dask.org/)]{.esi-emph} and
  [[dask-jobqueue](https://jobqueue.dask.org/en/latest/)]{.esi-emph} to
  integrate with HPC clusters
  ![](imgs/dask.svg){.position .absolute left="-8em" top="6em" width="30%"}
  ![](imgs/dask-jobqueue.png){.position .absolute left="-8em" top="9em" width="30%"}
:::

## An Unpractical Example

```{.python}
def f(x, y, z=3):
    return (x + y) * z
```

[Objective:]{.esi-emph} Evaluate `f` for four different values of `x` and `y = 4`

. . .

`f(`[2]{.esi-emph}`, 4, z=3) = 18`

`f(`[4]{.esi-emph}`, 4, z=3) = 24`

`f(`[6]{.esi-emph}`, 4, z=3) = 30`

`f(`[8]{.esi-emph}`, 4, z=3) = 36`

## An Unpractical Example {auto-animate="true"}

```{.python}
def f(x, y, z=3):
    return (x + y) * z
```

## An Unpractical Example {auto-animate="true"}

```{.python}
from acme import ParallelMap

def f(x, y, z=3):
    return (x + y) * z

with ParallelMap(f, [2, 4, 6, 8], 4) as pmap:
    pmap.compute()
```

## An Unpractical Example {auto-animate="true"}

![](imgs/acme_simple.webm){.position .absolute height="100%" top="0em"}


## Back To SLURM Connectomes...  {auto-animate=true}

. . .

```{.python data-id="pmap" style="font-size: 0.8em; "}
def compute_connectome(subIdx):

      # Take stock of data on disk
      data = datasets.fetch_development_fmri(age_group="adult")
      atlasCoords = datasets.fetch_coords_power_2011()

      # Extract fMRI time-series averaged within spheres @ atlas coords
      masker = NiftiSpheresMasker(seeds=atlasCoords)
      timeseries = masker.fit_transform(data.func[subIdx],
                                        confounds=data.confounds[subIdx])

      # Compute functional connectivity b/w brain regions
      estimator = GraphicalLassoCV()
      estimator.fit(timeseries)
      return estimator.covariance_

if __name__ == "__main__":

      # Compute functional connectivity of subject and save result
      con = compute_connectome(sys.argv[1])
      np.save("con_{}".format(sys.argv[1]), con)
```

## Back To SLURM Connectomes...  {auto-animate=true}

```{.python data-id="pmap" style="font-size: 0.8em; "}
def compute_connectome(subIdx):

      # Take stock of data on disk
      data = datasets.fetch_development_fmri(age_group="adult")
      atlasCoords = datasets.fetch_coords_power_2011()

      # Extract fMRI time-series averaged within spheres @ atlas coords
      masker = NiftiSpheresMasker(seeds=atlasCoords)
      timeseries = masker.fit_transform(data.func[subIdx],
                                        confounds=data.confounds[subIdx])

      # Compute functional connectivity b/w brain regions
      estimator = GraphicalLassoCV()
      estimator.fit(timeseries)
      return estimator.covariance_

if __name__ == "__main__":

      # Compute functional connectivity of subject and save result
      with ParallelMap(compute_connectome, range(33)) as pmap:
          results = pmap.compute()
```

## Back To SLURM Connectomes...

show notebook

## Back To SLURM Connectomes...

show esi_cluster_setup and dask dashboard
show HDF5 gymnastics (common datasets)?
Show virtual dataset overview?

# III An Offer You Can Refuse

## Why Python?

All ML/AI libraries live here (show scikit-learn?)

Interface with R, C (FSL), FORTRAN etc.

## How about

<your-institution-here>_cluster_setup?

## Summary

https://data.gov/
https://www.govdata.de/
https://www.nature.com/sdata/

ACME enables a clean separation of analysis tools from the underlying parallelization framework.

## Thank You

Photos?

